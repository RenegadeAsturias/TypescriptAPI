ONCEPTOS

Routing / Enrutamiento  ************************************************************************

Routing refers to how an application’s endpoints (URIs) respond to client requests. 

You define routing using methods of the Express app object that correspond to HTTP methods;
for example, app.get() to handle GET requests and app.post to handle POST requests. 
For a full list, see app.METHOD. 
You can also use app.all() to handle all HTTP methods and app.use() to specify
middleware as the callback function.

These routing methods specify a callback function (sometimes called “handler functions”) 
called when the application receives a request to the specified route (endpoint) and HTTP method. 
In other words, the application “listens” for requests that match the specified route(s) 
and method(s), and when it detects a match, it calls the specified callback function.

In fact, the routing methods can have more than one callback function as arguments. 
With multiple callback functions, it is important 
to provide next as an argument to the callback function and then call next() 
within the body of the function to hand off control to the next callback.

Route methods / Métodos de ruta *****************************************************************

A route method is derived from one of the HTTP methods, 
and is attached to an instance of the express class.
The following code is an example of routes that are defined for the GET and the POST methods 
to the root of the app.

// GET method route
app.get('/', function (req, res) {
  res.send('GET request to the homepage')
})

// POST method route
app.post('/', function (req, res) {
  res.send('POST request to the homepage')
})

Express supports methods that correspond to all HTTP request methods: get, post, and so on. 
For a full list, see app.METHOD.

There is a special routing method, app.all(), 
used to load middleware functions at a path for all HTTP request methods. 
For example, the following handler is executed for requests to the route “/secret” 
whether using GET, POST, PUT, DELETE, or any other HTTP request method supported in the http module.

app.all('/secret', function (req, res, next) {
  console.log('Accessing the secret section ...')
  next() // pass control to the next handler
})


Route paths  ***************************************************************************************

Route paths, in combination with a request method, define the endpoints at which requests can be made. 
Route paths can be strings, string patterns, or regular expressions.

The characters ?, +, *, and () are subsets of their regular expression counterparts. 
The hyphen (-) and the dot (.) are interpreted literally by string-based paths.

If you need to use the dollar character ($) in a path string, enclose it escaped within ([ and ]). 
For example, the path string for requests at “/data/$book”, would be “/data/([\$])book”.


Route parameters  ***********************************************************************************

Route parameters are named URL segments that are used to capture the values specified at their position in the URL. The captured values are populated in the req.params object, with the name of the route parameter specified in the path as their respective keys.

Route path: /users/:userId/books/:bookId
Request URL: http://localhost:3000/users/34/books/8989
req.params: { "userId": "34", "bookId": "8989" }

To define routes with route parameters, simply specify the route parameters in the path of the route as shown below.

app.get('/users/:userId/books/:bookId', function (req, res) {
  res.send(req.params)
})

The name of route parameters must be made up of “word characters” ([A-Za-z0-9_]).








